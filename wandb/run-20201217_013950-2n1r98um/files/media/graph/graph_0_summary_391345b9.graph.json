{"format": "torch", "nodes": [{"name": "stem.0", "id": 139918664616976, "class_name": "Conv2d(3, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)", "parameters": [["weight", [48, 3, 3, 3]]], "output_shape": [[128, 48, 32, 32]], "num_parameters": [1296]}, {"name": "stem.1", "id": 139918664616880, "class_name": "BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)", "parameters": [["weight", [48]], ["bias", [48]]], "output_shape": [[128, 48, 32, 32]], "num_parameters": [48, 48]}, {"name": "cells.0", "id": 139918664617120, "class_name": "Cell(\n  (preprocess0): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.op.1.weight", [16, 48, 1, 1]], ["preprocess1.op.1.weight", [16, 48, 1, 1]], ["_ops.0._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.0._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.0._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.0._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.0._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.0._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.1._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.1._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.2._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.2._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.3._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.3._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.4._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.4._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.5._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.5._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.6._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.6._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.7._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.7._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.8._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.8._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.9._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.9._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.10._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.10._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.11._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.11._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.12._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.12._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.13._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.13._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [16, 16, 1, 1]]], "output_shape": [[128, 64, 32, 32]], "num_parameters": [768, 768, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256]}, {"name": "cells.1", "id": 139918664617840, "class_name": "Cell(\n  (preprocess0): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)\n            (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)\n            (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.op.1.weight", [16, 48, 1, 1]], ["preprocess1.op.1.weight", [16, 64, 1, 1]], ["_ops.0._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.0._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.0._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.0._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.0._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.0._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.1._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.1._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.1._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.2._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.2._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.2._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.3._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.3._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.3._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.4._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.4._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.4._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.5._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.5._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.5._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.6._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.6._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.6._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.7._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.7._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.7._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.8._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.8._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.8._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.9._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.9._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.9._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.10._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.10._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.10._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.11._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.11._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.11._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.12._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.12._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.12._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.4.op.1.weight", [16, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.4.op.5.weight", [16, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [16, 16, 1, 1]], ["_ops.13._ops.5.op.1.weight", [16, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.5.op.5.weight", [16, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [16, 16, 1, 1]], ["_ops.13._ops.6.op.1.weight", [16, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [16, 16, 1, 1]], ["_ops.13._ops.7.op.1.weight", [16, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [16, 16, 1, 1]]], "output_shape": [[128, 64, 32, 32]], "num_parameters": [768, 1024, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256, 144, 256, 144, 256, 400, 256, 400, 256, 144, 256, 400, 256]}, {"name": "cells.2", "id": 139918629293408, "class_name": "Cell(\n  (preprocess0): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.op.1.weight", [32, 64, 1, 1]], ["preprocess1.op.1.weight", [32, 64, 1, 1]], ["_ops.0._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.0._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.0._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.0._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.0._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.1._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.1._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.1._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.1._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.2._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.2._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.2._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.2._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.3._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.3._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.3._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.3._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.4._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.4._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.5._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.5._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.5._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.5._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.6._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.6._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.6._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.6._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.7._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.7._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.8._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.8._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.9._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.9._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.9._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.9._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.3.conv_1.weight", [16, 32, 1, 1]], ["_ops.10._ops.3.conv_2.weight", [16, 32, 1, 1]], ["_ops.10._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.10._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.10._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.11._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.11._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.12._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.12._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.13._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.13._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [32, 32, 1, 1]]], "output_shape": [[128, 128, 16, 16]], "num_parameters": [2048, 2048, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 512, 512, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024, 288, 1024, 288, 1024, 800, 1024, 800, 1024, 288, 1024, 800, 1024]}, {"name": "cells.3", "id": 139918626848832, "class_name": "Cell(\n  (preprocess0): FactorizedReduce(\n    (relu): ReLU()\n    (conv_1): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n    (conv_2): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)\n    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.conv_1.weight", [16, 64, 1, 1]], ["preprocess0.conv_2.weight", [16, 64, 1, 1]], ["preprocess1.op.1.weight", [32, 128, 1, 1]], ["_ops.0._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.0._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.0._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.1._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.1._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.2._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.2._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.3._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.3._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.4._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.4._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.5._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.5._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.6._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.6._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.7._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.7._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.8._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.8._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.9._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.9._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.10._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.10._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.11._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.11._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.12._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.12._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.13._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.13._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [32, 32, 1, 1]]], "output_shape": [[128, 128, 16, 16]], "num_parameters}, {"name": "cells.4", "id": 139918165673440, "class_name": "Cell(\n  (preprocess0): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)\n            (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)\n            (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.op.1.weight", [32, 128, 1, 1]], ["preprocess1.op.1.weight", [32, 128, 1, 1]], ["_ops.0._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.0._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.0._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.0._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.1._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.1._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.1._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.2._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.2._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.2._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.3._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.3._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.3._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.4._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.4._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.4._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.5._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.5._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.5._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.6._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.6._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.6._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.7._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.7._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.7._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.8._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.8._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.8._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.9._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.9._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.9._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.10._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.10._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.10._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.11._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.11._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.11._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.12._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.12._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.12._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.4.op.1.weight", [32, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.4.op.5.weight", [32, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [32, 32, 1, 1]], ["_ops.13._ops.5.op.1.weight", [32, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.5.op.5.weight", [32, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [32, 32, 1, 1]], ["_ops.13._ops.6.op.1.weight", [32, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [32, 32, 1, 1]], ["_ops.13._ops.7.op.1.weight", [32, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [32, 32, 1, 1]]], "output_shape": [[128, 128, 16, 16]], "num_parameters}, {"name": "cells.5", "id": 139918163474512, "class_name": "Cell(\n  (preprocess0): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): FactorizedReduce(\n          (relu): ReLU()\n          (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.op.1.weight", [64, 128, 1, 1]], ["preprocess1.op.1.weight", [64, 128, 1, 1]], ["_ops.0._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.0._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.0._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.0._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.0._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.1._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.1._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.1._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.1._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.2._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.2._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.2._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.2._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.3._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.3._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.3._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.3._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.4._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.4._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.5._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.5._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.5._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.5._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.6._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.6._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.6._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.6._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.7._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.7._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.8._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.8._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.9._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.9._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.9._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.9._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.3.conv_1.weight", [32, 64, 1, 1]], ["_ops.10._ops.3.conv_2.weight", [32, 64, 1, 1]], ["_ops.10._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.10._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.10._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.11._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.11._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.12._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.12._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.13._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.13._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [64, 64, 1, 1]]], "output_shape": [[128, 256, 8, 8]], "num_parameters": [8192, 8192, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 2048, 2048, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096]}, {"name": "cells.6", "id": 139918161771200, "class_name": "Cell(\n  (preprocess0): FactorizedReduce(\n    (relu): ReLU()\n    (conv_1): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n    (conv_2): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.conv_1.weight", [32, 128, 1, 1]], ["preprocess0.conv_2.weight", [32, 128, 1, 1]], ["preprocess1.op.1.weight", [64, 256, 1, 1]], ["_ops.0._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.0._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.0._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.1._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.1._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.2._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.2._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.3._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.3._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.4._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.4._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.5._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.5._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.6._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.6._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.7._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.7._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.8._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.8._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.9._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.9._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.10._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.10._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.11._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.11._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.12._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.12._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.13._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.13._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [64, 64, 1, 1]]], "output_shape": [[128, 256, 8, 8]], "num_parameters": [4096, 4096, 16384, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096]}, {"name": "cells.7", "id": 139918159303728, "class_name": "Cell(\n  (preprocess0): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (preprocess1): ReLUConvBN(\n    (op): Sequential(\n      (0): ReLU()\n      (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    )\n  )\n  (_ops): ModuleList(\n    (0): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (1): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (2): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (3): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (4): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (5): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (6): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (7): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (8): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (9): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (10): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (11): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (12): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n    (13): MixedOp(\n      (_ops): ModuleList(\n        (0): Zero()\n        (1): Sequential(\n          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (2): Sequential(\n          (0): AvgPool2d(kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n        )\n        (3): Identity()\n        (4): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (5): SepConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n            (4): ReLU()\n            (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)\n            (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (6): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n        (7): DilConv(\n          (op): Sequential(\n            (0): ReLU()\n            (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)\n            (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n          )\n        )\n      )\n    )\n  )\n  (_bns): ModuleList()\n)", "parameters": [["preprocess0.op.1.weight", [64, 256, 1, 1]], ["preprocess1.op.1.weight", [64, 256, 1, 1]], ["_ops.0._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.0._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.0._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.0._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.0._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.0._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.0._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.0._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.0._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.0._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.1._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.1._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.1._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.1._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.1._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.1._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.1._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.1._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.1._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.2._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.2._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.2._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.2._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.2._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.2._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.2._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.2._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.2._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.3._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.3._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.3._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.3._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.3._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.3._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.3._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.3._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.3._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.4._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.4._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.4._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.4._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.4._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.4._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.4._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.4._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.4._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.5._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.5._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.5._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.5._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.5._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.5._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.5._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.5._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.5._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.6._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.6._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.6._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.6._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.6._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.6._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.6._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.6._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.6._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.7._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.7._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.7._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.7._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.7._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.7._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.7._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.7._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.7._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.8._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.8._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.8._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.8._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.8._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.8._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.8._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.8._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.8._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.9._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.9._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.9._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.9._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.9._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.9._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.9._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.9._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.9._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.10._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.10._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.10._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.10._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.10._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.10._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.10._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.10._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.10._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.11._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.11._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.11._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.11._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.11._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.11._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.11._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.11._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.11._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.12._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.12._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.12._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.12._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.12._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.12._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.12._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.12._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.12._ops.7.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.4.op.1.weight", [64, 1, 3, 3]], ["_ops.13._ops.4.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.4.op.5.weight", [64, 1, 3, 3]], ["_ops.13._ops.4.op.6.weight", [64, 64, 1, 1]], ["_ops.13._ops.5.op.1.weight", [64, 1, 5, 5]], ["_ops.13._ops.5.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.5.op.5.weight", [64, 1, 5, 5]], ["_ops.13._ops.5.op.6.weight", [64, 64, 1, 1]], ["_ops.13._ops.6.op.1.weight", [64, 1, 3, 3]], ["_ops.13._ops.6.op.2.weight", [64, 64, 1, 1]], ["_ops.13._ops.7.op.1.weight", [64, 1, 5, 5]], ["_ops.13._ops.7.op.2.weight", [64, 64, 1, 1]]], "output_shape": [[128, 256, 8, 8]], "num_parameters": [16384, 16384, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096, 576, 4096, 576, 4096, 1600, 4096, 1600, 4096, 576, 4096, 1600, 4096]}, {"name": "global_pooling", "id": 139918664617168, "class_name": "AdaptiveAvgPool2d(output_size=1)", "parameters": [], "output_shape": [[128, 256, 1, 1]], "num_parameters": []}, {"name": "classifier", "id": 139918157604512, "class_name": "Linear(in_features=256, out_features=10, bias=True)", "parameters": [["weight", [10, 256]], ["bias", [10]]], "output_shape": [[128, 10]], "num_parameters": [2560, 10]}, {"name": "_criterion", "id": 139918682733824, "class_name": "CrossEntropyLoss()", "parameters": [], "output_shape": [[]], "num_parameters": []}], "edges": []}